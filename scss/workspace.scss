@use "sass:map";
@use "sass:color";

:root {
  --base-font-size: 1rem;
}

@import 'theme/common';
@import 'theme/code/common';
@import 'theme/code/codemirror';
@import 'theme/code/hljs';
@import 'theme/ux/tooltip';

#app {

  @include breakpoint(medium up) {
    #left-panel-input, #right-panel-input {
      @include xy-cell($size: 6, $vertical: false);
      @include xy-cell-gutters($gutters: 1rem, $gutter-type: margin,
        $gutter-position: (top, bottom, left, right));
    }
  }

  #left-panel-input, #right-panel-input {
    border-width: 1px;
    border-style: solid;
    height: calc(100vh - 1rem);

    // we want tabs to shrink and content to grow to fill the
    // available space
    display: flex;
    flex-direction: column;

    position: relative;

    @each $name, $theme in $themes {
      [data-theme="#{$name}"] & .cm-panels {
        color: map.get($theme, "tab-color") !important;
        background-color: map.get($theme, "tab-background") !important;
        border-color: color.mix(map.get($theme, "body-font-color"),
          map.get($theme, "body-background"), $weight: 60%) !important;
      }

      [data-theme="#{$name}"] & {
        border-color: color.mix(map.get($theme, "body-font-color"),
          map.get($theme, "body-background"), $weight: 60%) !important;
      }
    }

    .cm-panels-top {
      border-top-width: 1px;
      border-top-style: solid;
      padding: 0.25rem 0 0.25rem 0;
    }

    .cm-panel.cm-search {
      .cm-button {
        @extend .button;
        @extend .primary;

        background-image: none !important;
        border: none !important;
        font-size: 1rem !important;
      }

      .cm-textfield {
        border: none !important;
        color: black;
      }

      label {
        text-transform: capitalize;
      }

      .cm-button, .cm-textfield, label {
        margin: 0 0.25rem 0 0 !important;
      }

      & button[name="close"] {
        @extend .button;
        @extend .primary;

        border-radius: 50%;
        line-height: 1rem;
        font-size: 1rem;
        height: 1rem;
        width: 1rem;
      }
    }

    .cm-panel.context-panel {
      $-panel-padding: 3px;
      $-panel-height: 5rem;
      $-panel-inner-height: calc($-panel-height - 2 * $-panel-padding);

      height: $-panel-height;
      padding: $-panel-padding;
      position: relative;

      .controls-wrapper {
        display: flex;
        flex-direction: column;

        width: 100%;
        height: $-panel-inner-height;

        div {
          display: flex;
          flex-direction: row;

          * + * {
            // small margin between siblings in the same panel
            margin-left: 0.25rem;
          }
        }

        div + div {
          // small margin between adjacent siblings
          margin-top: $-panel-padding;
        }

        .button-wrapper {
          flex: 1 1 auto;

          button {
            flex: 0 1 auto;
          }
        }

        .select-wrapper {
          display: flex;
          flex-direction: row;
          flex: 1 1 auto;

          label, select {
            display: inline-block;
          }

          label {
            flex: 1 0 auto;
            @include font-display-nobold;
            font-size: 110%;
            margin: auto 0;
          }

          select {
            padding: 0 0.25rem;
            border: 0;
            flex: 0 1 auto;
            line-height: $-panel-inner-height;

            @each $name, $theme in $themes {
              [data-theme="#{$name}"] & {
                color: map.get($theme, "body-font-color") !important;
                background-color: color.mix(map.get($theme, "body-font-color"),
                  map.get($theme, "body-background"), $weight: 30%) !important;
              }
            }
          }
        }
      }
    }
  }

  #left-panel-tabs, #right-panel-tabs {
    @each $name, $theme in $themes {
      [data-theme="#{$name}"] & {
        @include tabs-container(
          $background: map.get($theme, "tab-background"),
          $border-color: map.get($theme, "tab-border-color"),
        );

        border-width: 0px !important;
      }

      [data-theme="#{$name}"] & li {
        @include tabs-title(
          $color: map.get($theme, "tab-color"),
          $color-active: map.get($theme, "tab-color-active"),
          $background-hover: map.get($theme, "tab-background-hover"),
          $background-active: map.get($theme, "tab-background-active"),
        );
      }
    }

    flex: 0 1 auto;
    z-index: 1;

    li {
      display: flex;
      flex-direction: row;
      @include font-display-nobold;

      padding: 0 0.5rem 0 0.5rem; // some spacing between adjacent tabs

      button {
        display: inline;
        padding: 0;

        // circular button
        border-radius: 50%;
        width: 1rem;
        height: 1rem;
        font-size: 1rem;
        line-height: 1rem;
        position: relative;
        margin: auto;

        @each $name, $theme in $themes {
          [data-theme="#{$name}"] & {
            color: map.get($theme, "button-color");
            background-color: map.get($theme, "button-background-secondary");
          }
        }

        @include font-sans-serif;
        font-variant: normal;
      }

      // color fix: assign background color to entire tab
      @each $name, $theme in $themes {
        [data-theme="#{$name}"] &.is-active {
          background-color: map.get($theme, "tab-background-active") !important;
        }

        [data-theme="#{$name}"] &:focus-within {
          background-color: map.get($theme, "tab-background-active") !important;
        }

        [data-theme="#{$name}"] &:not(.is-active):hover {
          background-color: map.get($theme, "tab-background-hover") !important;
        }
      }

      > a {
        &:focus, &[aria-selected="true"] {
          background-color: inherit !important;
        }
      }
    }
  }

  #left-panel-tabs-content, #right-panel-tabs-content {
    @each $name, $theme in $themes {
      [data-theme="#{$name}"] & {
        @include tabs-content(
          $background: map.get($theme, "body-background"),
          $color: map.get($theme, "body-font-color"),
          $border-color: map.get($theme, "tab-border-color"),
        );

        // prevent the fade-in, fade-out effect
        transition: none !important;
      }
    }

    flex: 1 1 auto;
    overflow: hidden;
  }

  #meta-input, #doc-input, #doc-preview, #html-ref, .user-input {
    @include tabs-panel;
    height: 100%;
  }

  // re-style the placeholder box to match the rest of the theme
  .cm-foldPlaceholder {
    @each $name, $theme in $themes {
      [data-theme="#{$name}"] & {
        background-color: color.mix(map.get($theme, "body-background"),
          map.get($theme, "body-font-color"), $weight: 90%);
        border-color: color.mix(map.get($theme, "body-background"),
          map.get($theme, "body-font-color"), $weight: 50%);
        color: map.get($theme, "body-font-color");
      }
    }
  }

  #left-panel-info {
    font-size: 1.5rem;
    margin: 0;
    padding: 1rem;
    display: block;
    position: absolute;
    z-index: 0;

    @each $name, $theme in $themes {
      [data-theme="#{$name}"] & {
        color: map.get($theme, "muted-label-color");
      }
    }
  }

  #doc-preview {
    padding: 0.75rem;
    overflow: scroll;

    /* these sizes are based on Foundation's default values but are
     * converted from rem to percent so that they become relative to
     * the parent container, assuming 1rem = 16px, a reasonable default */
    h1 {
      font-size: 300%;
    }

    h2 {
      font-size: 250%;
    }

    h3 {
      font-size: 193.75%;
    }

    h4 {
      font-size: 156.25%;
    }

    h5 {
      font-size: 125%;
    }

    h6 {
      font-size: 100%;
    }

    font-size: #{var(--base-font-size)};

    math {
      &[display="block"] {
        // make display math somewhat larger
        font-size: 150%;
      }

      &:not([display="block"]), &[display=""] {
        // make inline math a little larger
        font-size: 110%;
      }

      merror {
        background-color: transparent !important;
        border: none;
      }

      @each $name, $theme in $themes {
        [data-theme="#{$name}"] & merror {
          color: map.get($theme, "error-font-color");
        }
      }
    }

    span.citep .error {
      @each $name, $theme in $themes {
        [data-theme="#{$name}"] & {
          color: map.get($theme, "error-font-color");
          font-weight: bold;
        }
      }
    }

    span.citet .error {
      @each $name, $theme in $themes {
        [data-theme="#{$name}"] & {
          color: map.get($theme, "error-font-color");
          font-weight: bold;
        }
      }
    }
  }

  #html-ref {
    padding: 0 0.75rem;

    li {
      margin: 0.5rem 0;
      font-size: #{var(--base-font-size)};
    }

    // highlighted inline code
    p code, p code.hljs, li code, li code.hljs {
      @include inline-code;
    }

    // highlighted code block
    pre code, pre code.hljs {
      @include code-block($block-margin: 0.5rem, $block-padding: 0.5rem);
    }
  }
}

// vim: set ft=scss:
