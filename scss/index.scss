@use "sass:map";
@use "sass:color";

@use "common" as *;
@use "fonts" as *;
@use "nordtheme" as nord;
@use "lightmode" as light;
@use "darkmode" as dark;

$themes: (
  "light": light.$theme,
  "dark": dark.$theme,
);

$titlebar-inner-height: 4rem;
$titlebar-padding: 0.5rem;

@import 'fdn/scss/foundation';

@include foundation-global-styles;
@include foundation-typography;
@include foundation-xy-grid-classes;
@include foundation-visibility-classes;

@include foundation-title-bar;
@include foundation-off-canvas;

@include custom-font-definitions;

:root {
  --base-font-size: 1rem;
}

body {
  @include font-sans-serif;
}

@include breakpoint(medium) {
  // these sizes are based on Foundation's default values but are
  // converted from rem to percent so that they become relative to
  // the parent container, assuming 1rem = 16px, a reasonable default

  h1 {
    font-size: 300%;
  }

  h2 {
    font-size: 250%;
  }

  h3 {
    font-size: 193.75%;
  }

  h4 {
    font-size: 156.25%;
  }

  h5 {
    font-size: 125%;
  }

  h6 {
    font-size: 100%;
  }
}

@each $name, $theme in $themes {
  [data-theme="#{$name}"] body {
    color: map.get($theme, "body-font-color");
    background-color: map.get($theme, "body-background");
  }
}

#title {
  @include breakpoint(small only) {
    @each $name, $theme in $themes {
      [data-theme="#{$name}"] & {
        color: map.get($theme, "titlebar-color");
        background-color: map.get($theme, "titlebar-background");
      }
    }

    display: flex;

    & .title-bar-left {
      flex: 0 1 100%;
    }

    & .title-bar-right {
      flex: 1 0 auto;
    }

    & .title-bar-left, & .title-bar-right {
      margin: auto;

      button {
        margin: auto;
      }
    }

    height: $titlebar-inner-height;
    padding: $titlebar-padding;
  }

  button {
    @each $name, $theme in $themes {
      [data-theme="#{$name}"] &.primary {
        color: map.get($theme, "titlebar-button-color");
        background-color: map.get($theme, "titlebar-button-background-primary");
      }

      [data-theme="#{$name}"] &.secondary {
        color: map.get($theme, "titlebar-button-color");
        background-color: map.get($theme, "titlebar-button-background-secondary");
      }
    }

    max-height: $titlebar-inner-height;
  }
}

#title .title-bar-title, #menu .menu-title {
  @include font-display;
  font-size: x-large;
  line-height: 1;
}

#pageWrapperOuter {
  @include breakpoint(medium up) {
    @include xy-grid-container;
  }

  @include breakpoint(small only) {
    @include off-canvas-wrapper;
    height: calc(100vh - $titlebar-inner-height);
  }
}

#pageWrapperInner {
  @include breakpoint(medium up) {
    @include xy-grid;
  }
}

#menuWrapper {
  @include breakpoint(medium up) {
    @include in-canvas;
    @include xy-cell($size: 2);

    margin: 0;
  }

  @include breakpoint(small only) {
    @each $name, $theme in $themes {
      [data-theme="#{$name}"] & {
        @include off-canvas-base($fixed: false,
          $background: map.get($theme, "offcanvas-background"));
      }
    }

    @include off-canvas-basics;
    @include off-canvas-base;
    @include off-canvas-position($position: left);
  }
}

#menu {
  @include menu-base;
  @include menu-expand;
  @include menu-direction($dir: vertical);

  padding: 1rem;

  li {
    margin: 0.5rem 0 0.5rem 0;
  }

  @each $name, $theme in $themes {
    [data-theme="#{$name}"] & {
      li label {
        color: map.get($theme, "muted-label-color");
      }
    }
  }

  li label {
    font-size: 0.9rem;
    @include font-display;
  }

  li button, li .button {
    margin: 1rem 0;
    padding: 0.5rem;
  }
}

.slider {
  @include slider-container;

  @each $name, $theme in $themes {
    [data-theme="#{$name}"] & {
      background-color: map.get($theme, "slider-background");
    }
  }

  margin: 0.5rem 0 0.5rem 0;
}

.slider-handle {
  @include slider-handle;

  @each $name, $theme in $themes {
    [data-theme="#{$name}"] & {
      background-color: map.get($theme, "slider-handle-background");
    }
  }
}

.slider-fill {
  @include slider-fill;

  @each $name, $theme in $themes {
    [data-theme="#{$name}"] & {
      background-color: map.get($theme, "slider-fill-background");
    }
  }
}

.switch {
  @include switch-size;
}

.switch-input {
  @include switch-input;
}

.switch-paddle {
  @include switch-paddle;

  @each $name, $theme in $themes {
    [data-theme="#{$name}"] & {
      background-color: map.get($theme, "switch-background");
    }

    [data-theme="#{$name}"] &::after {
      background-color: map.get($theme, "switch-paddle-background");
    }

    [data-theme="#{$name}"] input:checked ~ & {
      background-color: map.get($theme, "palette-primary");
    }
  }
}

button {
  @each $name, $theme in $themes {
    [data-theme="#{$name}"] &.primary {
      @include button($background: map.get($theme, "button-background-primary"),
        $background-hover: auto, $color: map.get($theme, "button-color"),
        $style: solid);

      padding: 0.5rem;
      font-size: 1rem;
      @include font-display;
    }

    [data-theme="#{$name}"] &.secondary {
      @include button($background: map.get($theme, "button-background-secondary"),
        $background-hover: auto, $color: map.get($theme, "button-color"),
        $style: solid);

      padding: 0.5rem;
      font-size: 1rem;
      @include font-display;
    }
  }

  span.icon {
    padding-right: 0.5em;
  }
}

#app {
  @include breakpoint(medium up) {
    @include xy-cell($size: 10, $vertical: false);
    @include xy-cell-base($size: grow);
    @include xy-grid($direction: horizontal, $wrap: true);

    #editorWrapper {
      @include xy-cell($size: 12, $vertical: false);
    }

    #renderWrapper, #outputWrapper {
      @include xy-cell($size: 6, $vertical: false);
    }

    #outputWrapper #innerOutputWrapper {
      height: calc(xy-cell-size-css($size: 6) - 3rem);
    }

    #editorWrapper, #renderWrapper, #outputWrapper {
      @include xy-cell-base($size: grow);
      @include xy-cell-gutters($gutters: 1rem, $gutter-type: margin,
        $gutter-position: (top, bottom));
      height: calc(50vh - 1rem);
    }

    margin: 0;
    height: 100vh;
  }

  @include breakpoint(small only) {
    @include off-canvas-content;
    @include xy-grid($direction: vertical, $wrap: false);

    #editorWrapper {
      @include xy-cell($size: 5, $vertical: true);
      @include xy-cell-base($size: grow);
    }

    #renderWrapper {
      @include xy-cell($size: 2, $vertical: true);
      @include xy-cell-base($size: grow);
      @include flex-order(0);
    }

    #outputWrapper {
      @include xy-cell($size: 5, $vertical: true);
      @include xy-cell-base($size: grow);
      @include flex-order(1);

      #innerOutputWrapper {
        height: calc(xy-cell-size-css($size: 5) - 3rem);
      }
    }

    padding: 0 0.5rem;
    height: calc(100vh - $titlebar-inner-height);
  }

  #outputWrapper {

    #innerOutputWrapper {
      position: relative;
      flex: 1 0 auto;

      #output {
        height: 100%;
        font-size: 75%;
      }

      #copyButton {
        position: absolute;
        top: 0;
        right: 0;
        margin: 1rem;
      }
    }
  }

  #editorWrapper, #outputWrapper, #renderWrapper {
    display: flex;
    flex-direction: column;

    label {
      flex: 0 0 auto;
      height: 3rem;

      font-size: xx-large;
      @include font-display;
    }
  }

  #editor, #output, #render {
    flex: 1 0 auto;
  }

  #editor, #output {
    border: 1px solid;
  }

  #render {
    font-size: 200%;
    overflow: scroll;
  }

  font-size: var(--base-font-size);
}

.cm-editor {
  @each $name, $theme in $themes {
    [data-theme="#{$name}"] & .tok-typeName {
      color: map.get($theme, "token-typename-color");
    }

    [data-theme="#{$name}"] & .tok-className {
      color: map.get($theme, "token-classname-color");
    }

    [data-theme="#{$name}"] & .tok-propertyName {
      color: map.get($theme, "token-propertyname-color");
    }

    [data-theme="#{$name}"] & {
      border-color: map.get($theme, "body-font-color");
    }
  }

  .tok-typeName, .tok-className, .tok-propertyName {
    font-weight: bold;
  }

  .cm-scroller {
    @include font-monospace;
  }
}

// vim: set ft=scss:
