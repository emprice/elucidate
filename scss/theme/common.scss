@use "sass:map";
@use "sass:color";

@import 'global';
@import 'modes';

:root {
  --base-font-size: 1.1rem;
}

$titlebar-inner-height: 4rem;
$titlebar-padding: 0.5rem;

@import 'fdn/scss/foundation';

@include foundation-global-styles;
@include foundation-typography;
@include foundation-xy-grid-classes;
@include foundation-visibility-classes;
@include foundation-title-bar;
@include foundation-off-canvas;
@include foundation-drilldown-menu;
@include foundation-table;

@import 'ux/button';
@import 'ux/switch';
@import 'ux/slider';

// see https://w3c.github.io/mathml-core/#the-top-level-math-element
// these values are standard for a user-agent stylesheet, and we want to
// make sure we don't accidentally override them
math {
  direction: ltr;
  text-indent: 0;
  letter-spacing: normal;
  line-height: normal;
  word-spacing: normal;
  font-family: math;
  font-size: inherit;
  font-style: normal;
  font-weight: normal;
  display: inline math;
  math-shift: normal;
  math-style: compact;
  math-depth: 0;

  &[display="block" i] {
    display: block math;
    math-style: normal;
  }

  &[display="inline" i] {
    display: inline math;
    math-style: compact;
  }
}


body {
  @include font-sans-serif;

  @each $name, $theme in $themes {
    [data-theme="#{$name}"] & {
      color: map.get($theme, "body-font-color");
      background-color: map.get($theme, "body-background");
    }
  }
}

#title {
  @include breakpoint(small only) {
    @each $name, $theme in $themes {
      [data-theme="#{$name}"] & {
        color: map.get($theme, "titlebar-color");
        background-color: map.get($theme, "titlebar-background");
      }
    }

    display: flex;

    & .title-bar-left {
      flex: 0 1 100%;
    }

    & .title-bar-right {
      flex: 1 0 auto;
    }

    & .title-bar-left, & .title-bar-right {
      margin: auto;

      button {
        margin: auto;
      }
    }

    height: $titlebar-inner-height;
    padding: $titlebar-padding;
  }

  button {
    @each $name, $theme in $themes {
      [data-theme="#{$name}"] &.primary {
        color: map.get($theme, "titlebar-button-color");
        background-color: map.get($theme, "titlebar-button-background-primary");
      }

      [data-theme="#{$name}"] &.secondary {
        color: map.get($theme, "titlebar-button-color");
        background-color: map.get($theme, "titlebar-button-background-secondary");
      }
    }

    max-height: $titlebar-inner-height;
  }
}

#title .title-bar-title, #menu .menu-title {
  @include font-display;
  font-size: x-large;
  line-height: 1;
}

#page-wrapper-outer {
  @include breakpoint(medium up) {
    @include xy-grid-container;
  }

  @include breakpoint(small only) {
    height: calc(100vh - $titlebar-inner-height);
  }
}

#page-wrapper-inner {
  @include breakpoint(medium up) {
    @include xy-grid;
  }
}

#menu-wrapper {
  @include breakpoint(medium up) {
    @include in-canvas;
    @include xy-cell($size: 2, $gutter-type: margin, $gutters: 0);
  }

  @include breakpoint(small only) {
    @include off-canvas-basics;

    @each $name, $theme in $themes {
      [data-theme="#{$name}"] & {
        @include off-canvas-base($fixed: false,
          $background: map.get($theme, "offcanvas-background"));
      }
    }

    @include off-canvas-position($position: left);
  }

  min-width: 200px;   // keep the menu from getting too squashed
}

#menu {
  padding: 1rem;
  display: flex;
  flex-direction: column;

  @include breakpoint(medium) {
    position: sticky;
    width: 100%;
    top: 0;
  }
}

#controls, #nav {
  @each $name, $theme in $themes {
    [data-theme="#{$name}"] & label {
      color: map.get($theme, "muted-label-color");
    }
  }

  label {
    @include font-display;
    font-size: 0.9rem;
    line-height: 1;
  }
}

#controls {
  @include menu-base;
  @include menu-expand;
  @include menu-direction($dir: vertical);

  li {
    margin: 0.5rem 0 0.5rem 0;
  }

  li button, li .button {
    margin: 0;
    padding: 0.5rem;
  }
}

#nav {
  margin: 0.5rem 0;
}

#nav-drilldown {
  @include menu-base;

  display: block;

  li a {
    padding: 0.5rem 0;
  }

  &, & ul, & li, & a {
    background-color: #00000000 !important;
  }

  @each $name, $theme in $themes {
    [data-theme="#{$name}"] & a {
      color: map.get($theme, "body-font-color");
    }

    [data-theme="#{$name}"] & a::after {
      border-left-color: map.get($theme, "palette-primary");
    }

    [data-theme="#{$name}"] & .js-drilldown-back > a::before {
      border-right-color: map.get($theme, "palette-primary");
    }
  }
}

@each $name, $theme in $themes {
  [data-theme="#{$name}"] tbody {
    border-color: color.mix(map.get($theme, "body-background"),
      map.get($theme, "body-font-color"), $weight: 80%);
  }
}

#app {
  @include breakpoint(medium up) {
    @include xy-cell($size: 10, $gutters: 0, $gutter-type: margin, $vertical: false);
    @include xy-cell-base($size: grow);
    @include xy-grid($direction: horizontal, $wrap: true);

    height: 100vh;
  }

  @include breakpoint(small only) {
    @include off-canvas-content;
    @include xy-grid($direction: vertical, $wrap: false);

    padding: 0 0.5rem;
    height: calc(100vh - $titlebar-inner-height);
  }
}

#body {
  @include breakpoint(medium up) {
    @include xy-cell($size: auto, $vertical: false);
    margin: 1rem;
  }

  @include breakpoint(small only) {
    @include off-canvas-content;
    padding: 1rem;
  }
}

#app, #body {
  font-size: var(--base-font-size);
}

// these sizes are (originally) based on Foundation's default values but are
// converted from rem to percent so that they become relative to the parent
// container, assuming 1rem = 16px, a reasonable default

h1, .h1 {
  @include font-display;
  font-size: 175%;
}

h2, .h2 {
  @include font-sans-serif;
  font-size: 225%;
}

h3, .h3 {
  @include font-sans-serif;
  font-size: 193.75%;
}

h4, .h4 {
  @include font-sans-serif;
  font-size: 156.25%;
}

h5, .h5 {
  @include font-sans-serif;
  font-size: 125%;
}

h6, .h6 {
  @include font-sans-serif;
  font-size: 100%;
}

@each $name, $theme in $themes {
  @each $othername, $othertheme in $themes {
    [data-theme="#{$name}"] .show-for-#{$othername}-only {
      @if $name == $othername {
        display: block;
      } @else {
        display: none;
      }
    }
  }
}

// vim: set ft=scss:
